# Usage:
#
# deploy:
#   uses: mhils/workflows/.github/workflows/python-deploy.yml@main
#   needs: check
#   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#   permissions:
#     id-token: write

permissions:
  id-token: write

on:
  workflow_call:
    inputs:
      environment:
        type: string
      artifact:
        type: string
      repository:
        type: string

jobs:
  deploy:
    environment: ${{ inputs.environment || 'deploy' }}
    env:
      TWINE_REPOSITORY: ${{ inputs.repository || 'pypi' }}
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install -y twine
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact || 'wheels' }}
          path: dist/
      - run: twine check dist/*
      - name: mint API token  # copied from https://docs.pypi.org/trusted-publishers/using-a-publisher/
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/github/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
      - run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ steps.mint-token.outputs.api-token }}
